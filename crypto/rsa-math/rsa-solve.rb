#!/usr/bin/env ruby
#imports

require 'openssl'
# methods adapted from https://gist.github.com/jingoro/2388745

def gcd(x, y)
    gcdext(x, y).first
  end

def gcdext(x,y)
    if x < 0
        g, a, b = gcdext(-x, y)
        return [g, -a, b]
    end
    if y < 0
        g, a, b = gcdext(x, -y)
        return [g, a, -b]
      end
      r0, r1 = x, y
      a0 = b1 = 1
      a1 = b0 = 0
      until r1.zero?
        q = r0 / r1
        r0, r1 = r1, r0 - q*r1
        a0, a1 = a1, a0 - q*a1
        b0, b1 = b1, b0 - q*b1
      end
      [r0, a0, b0]
end
def invert(num, mod)
    g, a, b = gcdext(num, mod)
    unless g == 1
      raise ZeroDivisionError.new("#{num} has no inverse modulo #{mod}")
    end
    a % mod
end
#end methods

c = 88078154187503746327765128889073411556090545481617928513337304945912714220823680967129051470873601268640360042824387555466197479693961558256689010548262593185997494406704934673146117178086377101864435271684245901214915833442694675784562313954144563923460098496705021601288997503656057279778386725340239175530
n = 147720936134669456975617202169086913591832713006137189368588334030836309672102601035425841462186510149328644813449230183610499071646822634720876665518383783443820106319814080107638484324498930653322553981762812429749021986624803418068378076932519005914985316659877822248974165872493808796026405865646617064847
p = 11387480584909854985125335848240384226653929942757756384489381242206157197986555243995335158328781970310603060671486688856263776452654268043936036556215243
q = 12972222875218086547425818961477257915105515705982283726851833508079600460542479267972050216838604649742870515200462359007315431848784163790312424462439629
e = 65537
phi = (p-1) * (q-1)
d = invert(e,phi) # to find inverse mod
m = c.to_bn.mod_exp(d,n) # c^d mod n
m = m.to_s(16) # convert to hex
m = m.split # converting the string into an arrary
puts m.pack('H*') #using the pack method of array class to convert from hex to ascii 